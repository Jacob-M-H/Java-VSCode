Switch statements only work with int, short, byte, and char, and some enumerated types like String, Byte, Integer, Short.
Q: Why is it limited?

Scanner will read a whole line,
thus if you scan for an integer,
type in 18\n, for enter, it grabs the integer portion,
leaving \n, so make sure to clear the scanner, just like in python or c++.


Scanner like c++ can also read files and other things.


The do loop,
do{code...}while(condition) <-a variation of while loop, will always do the code at least once.

For loops are similar to cpp, 
for (int i =0; i<=10; i++){}

Arrays:
String[] cars ={"Camero"} <-string array with 1 value.
Similar to cpp again.
String[] cars = new String[1]; will reserve enough space for one element.

String[][] matrix =new String[3][3]; <-a 2d array, this pattern continues.


https://youtu.be/xk4_1vDrzzo?t=6810

Access methods with a ., like String name, name.equals('bob'). etc.


Wrapper class, allows you to use primitive dat atypes as reference data types.
Reference data types contain useful methods (Like strings), and can be used with collections (ex.ArrayList)
//primitive //Wrapper
//-------------------
//boolean    Boolean 
//char       Character
//int        Integer
//double     Double 
//etc.        etc.
//autoboxing = automatic convrsion java compiler makes between primitives to corresponding Wrapper class
//unboxing = reverse of autoboxing. Auto conversion of wrapper class to primitive

NOTE: A reference data type is slower than primitives.<- Much slower.

#This is autoboxingV, treat them like primitive values (if a ==true)
Boolean a = true;
Character b = '@';
Integer c =123;
Double d =3.14;
String e = "Bro"; 
//Reference data types always start with a capital character.


-------------
Array list, a resizable array, elements can be added and removed after compilation phase, store reference data types.
ArrayList<String> = new ArrayList<String>(); <-need to import the java.util.ArrayList;
You always use wrapper classes.

Array list uses add and get, set, remove, clear. 

2D Array Lists. 
Dynamic list of lists. 
import java.util.*; <-imports all the java utilities. 
The 2D list uses the Array List itself along with another wrapper class.
You can chain the methods for array lists and other collections.
This is like Cpp.

_____________
for-each loop.
Less steps (faster), more readable, less flexible.
String[] animals = {"cat", "dog", "rat", "bird"};
for (String i : animals) { //: stands for 'in' , read for each String 'in' array animals
    System.out.println(i);
}
ArrayList<String> animals = new ArrayList<String>();
animals.add(etc.. lazy to type);
^Just the array list collection and it works as well.
------------------------

METHODS
Outside our main loop, 

static return-type method(arguments passed to method's parameters) {//static added just because we are calling from a static method (main in the example)
    String.out.println("Hello "+argument)
    //return result;
}

Overloading the methods is an option (Providing the same method but with different parameters).
This works as each method get's its own method name +paramters =different method signatures.

--------------------
Printf method.
optional to format/contorl/display text to console window.
two arguemtns, format string + object/varaible/value
% [flags] [precision] [width] [conversion-character]

 
printf's have similar placeholder values, %c, %b, %s, %d (Int), %f (double/float), etc.

Width field/flag set numbers characters. %10s means ten characters minimum. 
a negative number with left justify the text, will come after the text.
.2 is Precision field, so %.1f gives .0 for 100, so 100.0.

[flags]
adds an effect to output based on flag added to format pecifier
-: left justify+ output a + or - symbol for a numeric value
0: numeic values are zero-padded
,: comma grouping seperator if numbers >1000
-----------------------

https://youtu.be/xk4_1vDrzzo?t=10175
FINAL keyword in java

Anything declared as final cannot be changed later in the program.
Preceeds data type. 
Common practice is when declared final the variable name is given all capitals.

--------------------
OOP - Part 2 of BroCode series.

May either decalre in a different java file, or in the same file, so long as it's outside the current class.
public class Example{
    String exText="Hello World!";
    int year = 2023;

    void greet(){
        System.out.println(exText);
    }
}

Constructing the class:
Example exampleClass = new Example();
 
----------------------
Constructor 
public class Example{
    String exText="Hello World!";
    int year = 2023;

    void greet(){
        System.out.println(exText);
    }
    Example(String exampleText, int yearDate){
        this.exText=exampleText; //NOTE 'this' is used, it is much like in cpp, but it makes sure the variable assigned is scoped correctly.
        this.year = yearDate;
    }
}
Constructor is a method like in cpp. 
Example exampleClass = new Example("I'm using a constructor", 2023);
This 'this' keyword doesn't seem as straightforward as the cpp version.
It's similar to the 'self' in python. Anyways.

We an also use an object's attributes within it's own class, we must use 'this'.


-------------------
Local vs Global variables.
Local is inside a method, global is decalred outside of a method but within a class.
This is similar to cpp, except it is in the context of everything in a class, rather than the file itself.

-------------------
Constructors can also be overloaded.
-------------------
toString method,
returns a 'textually represents' an object.
printing a object gives a memory address. 
All objects inheret a toString() method, which is used implicitly when using a println object.
Many people override the toString method for the text representation.
-------------------
Array of objects.
int[] numbers = new int[3];
Similarly
Example[] exampleArray = new Example[3];

-------------------
Static keyword modifier. 
Applies to variable/method/class [different video]. A single copy of this thing is shared between all of the classes.
The class 'owns' the same variable/method. 

Access with class name like a attribute. Example.exampleStatic,
Can access with a speciifc variable of that class but it isn't recommended. 
Static reference is what the Example.exampleStatic is demonstrating.
-------------------
Inheretence. 
https://youtu.be/xk4_1vDrzzo?t=13717

Parent class:
public class Vehicle{}
public class Car extends Vehicle{}

The extend keyword is key. Just like cpp and python, the child class inherets the attributes and previous methods.
The methods can be overridden however for the subclass I'm sure.

----------------------
Method overriding
-Exactly as described above. Method with same attribtues in the parent class is declared in the child class, and the child class now overrides it.
----------------------
Super keyword.
Keyword revers to the superclass (parent) of an object, very similar to the 'this' keyword.
When makinga constructor for a subclass,
if the attributes are defined in the superclass, we want to use the super keyword, for example
super(name, age); This then calls the constructor of the superclass, with attribtues name and age,
while we continue to use this.power or another attribute for the subclass in the subclasses respective constructor.
This is important for correctness and perhaps compiling.

Additionally, if hte parent class has a method, 
then the subclass should use super to get the information from the parent class method, if we require an 'expansion' of that functiosn return/purpose.








----------PART 3, BIG ENGINEERING DECISIONS 
            AND SECURITY/CREATING READABLE CODE-----------  
        



------------------------------------------
abstract keyword.
Abstract classes cannot be instantianted, but subclass can be.
Vehicle vehicle =new Vehicle();
Car car =new Car();
This helps prevent creating a class that is too abstract.
By making a 'public abstract class Vehicle{}', this prevents 
this class from being instantianted alone. It then MUST be accessed by subclasses.
-
abstract methods, 
abstract void go(); <-abstract methods don't have a method,
but it FORCES it to be defiend in the subclasses.
Requires method overriding. 

A good example I can think of is 'shape' and 'number of edges' which requires a return of an integer. So Square, Circle etc then have to return something (might not be correct but ensures consistency)
--------------------------------------------
Access modifiers
public, no modifier, proectected, private.
Access level chart would be useful. 
 https://youtu.be/xk4_1vDrzzo?t=15028
this might require NOTE: return, as this is beyond right now.
Creating packages, packages are a collection of classes, while classes are packages of code.
Packages create 2 lasses in each, new class 'A' and chekc public static void main. Then  'B', no check. 
Then Asub in package 2. To inherit everything from package 1, requires an import from package 1. 

No modifier: defautl access modifier is only seein inside the same package. 
public: visible to any package in the project folder. Used in a lot of classes.
So classes are visible in the same package (if not public? NOTE: Test this)
But their code might nto be accessible without public in the same package (NOTE: Test this)?
If they are public, the class can be created, but if hte variable is not public, then another package cannot see that code? (TEST THIS)
WHATS DEFINITE: Anything with public is visible to any other package in the project.

Protected: Accessible to a different class in a different package so long as it's a subclass of the class with the protected method/attribute.

Private: only visible to the class itself. 
NOTE: Question, what about subclasses/dervied classes?

---------------------------------------------
Encapsulation
-attributes in a class being hidden or private.
Can be accessed only thoruhg methods (getters and setters)
We SHOULD make attirbeust private if don't have a reason to make htem public to make them public or protected.
-I think it just removes hte ability to have direct access, and I think maybe keep attribtues hidden.
------------------------------------------
Copy objects
Use getters and setters to make a copy.

'car2 = car1' makes the same address, not a copy.
Instead, make a copy method. 
car2.copy(car1); 
This then uses setters and getters to copy the contents.
------------------------------------------
Interface - a template that can be applied to a class.
Similar ot inheritance, but specifies what a class has/must do.
Classes can apply more than one interface, inheritance is limited to 1 super class.

So it's like having a lot of parent classes.

File new, interface. public interface Prey, Predator. 
Can declare variables and methods, but those methods don't need a body.
public interface Prey{
    void flee();
}
public class Rabbit implements Prey{ //Theres a right click to add in all unimplemented classes [POST:Methods?]
    @Override
    public void flee() {
        System.out.println("Flee");
    }
}

To implement multiple, Prey,Predator, they are sperated by a comma only.

NOTE/QUESTION/FUTURE:What happens if both Prey and Predator have the same method name and arguments? Is there a way to tell if a thing has a particualr interface?
-------------------------------------------
Polymorphism in Java.
https://youtu.be/xk4_1vDrzzo?t=16900
The ability of an object to identify as more than one type.
Vehicle parent of Boat/Bike/Car.
Car[] racers ={car, bike, boat} doesn't work,
however if it extends as a vehicle, we can chagne data type as a vehicle.
Vehicle[] racers ={car, bike, boat}

---------------------------------------------
Dynamic polymorphism <-ability to be multiple data types during runtime.
Example is creating a parent class. Then scans the user's response. Then the instance of the parent class is assigned a 'new Subclass();'.
This is interesting.
-----------------------------------------------
Exception handling
Events that happen during the program that disrupts normal flow of instructions.

In danger code surround it with try{}, then follow with catch('type of exception' 'var name'){}
And finally{} which will always run after try, even if an exception happens.
Also we can catch general exceptions with the 'Exception' exception.
NOTE: This is great for closing prompts or files before exiting a gui aciton.

-----------------------------------------------
File class in Java.
----------------------------------------------
File writter class in Java.
Will need try and catch blocks. Write method which will take a string.
Then close the writer after writing. Append will add things to the end of hte files.

----------------------------------------------
File Reader class in Java.
Reads file as a stream of characters 1 by 1. read() returns int value which contains the byte value. Whe nread() returns -1, there is no more data t oread.
Also try and catch block for the reader.
---------------------------------------------
Audio reader in Java.
-uses wav files, not mp4/mp3.
Uses the AudioInputStream, and AudioSystem class. 
Clip also is a class I guess.
Program needs to remain open for hte clip to play, for example like a gui's 'X', or a user input wait while loop.

---------------------------------------------







PART 3 GUI IN JAVA

----------------------------------------------
Jframes in Java. 
Jframe is a GUI window to add components to.
-size, visibility, title, default operations (close, min, max?),
-resize flags, Icon of frame [use ImageIcon class],
-frame color/Pane, background,  
File, new class, makes a subclass of Jframe, other way to create a Jframe,
basically makes a preset frame, and he gets rid of hte Jframe declaration,
and edit replace frame. with this., then he creates an instance of the 'MyFrame' class.
Neat.
If you don't plan on using a name of the variable you can just do 'new Frame' but that seems odd.
---------------------------------------------
JLabel - Gui display area for string of text an image or both.
can also add a ImageIcon. 
Java likes to place string on right side of Image,
there's set horizontal and set vertical. Can also do borders,
Also labels seem to be holding both an Icon and text, so it's like a pyramid, you can change the things in the label's positions, then place the labels positon on the frame.

'Default layout manager' We can manually set the size and placement of hte label....
Layout manager usually border default. 

FUTURE/NOTE: This will ikely need to be revisited and experimented.

Pack function of frames. Will resize the size of hte frame to accomodatethe  size of componenets.
--------------------------------------------
JPanels in Java. - GUI componenet that functiosn as a container to hold other components.

--------------------------------------------
Buttons in Java
--------------------------------------------
Border layout managers
-North, South, Center, East, West.
--------------------------------------------
FlowLayout in Java.
-Places componenets in a row sized at prefered size. If horizontal layout too small, flowlayout class uses next avaialble row.
--------------------------------------------
grid layouts in Java.
GridLayout manager -places components in grid of cells which takes all available space iwthin it's cell, and each cell is the same size.

--------------------------------------------
JLayeredPane -swing container, allows a depth basically. 
Can stack components on top or below one another.
-Theres a visual, default_.pallet->modal->PopUp->Drag. 
-we can specify which layer to add things. 
-shortcut, add a number associated number wit heach layer, there's a 0 for default, basically Integer.valueOf(0); for default layer. [when adding a pane]

--------------------------------------------
Open new window using Java Swing.
If only want there to be one window, frame.dispose(); which would close out of the frame of hte launch page.
I see. Create an instance of the window and then instance it when a button is pressed, etc.
Require a way to trigger the instance.
--------------------------------------------
Dialouge boxes in Java.
-JOptionPane
--------------------------------------------
JTextField, GUI textbox componeent that can be used to add, set, or get text.
--------------------------------------------
JCheckBox, GUI check box.
--------------------------------------------
JRadioButton - one or more butons in a grouping which may only select 1 in a group.
--------------------------------------------
JComboBox - a GUI, combines a button or ediable field and a dro pdown list.
--------------------------------------------
JSliders in Java.
--------------------------------------------
Progress Bar - visual aid ot let user know an operaiton is progressing.
--------------------------------------------
JMenuBar <-this is good stuff!
Instead of adding to the frame, you set it. Then add the menus.
then each JMenu add to the JMenuBar.
Then add each menu item to each JMenu (respective to the drop down you want).

Action listner interface added to each menu item. Thesee are added to each JMenuItem.
And I think you add 'this' if it's in the class. This should be returned to later (NOTE/FUTURE)

We can also add keyboard shortcuts to menu items. 'setMnemonic'.
For keyevents, I think the VK_E means Alt+E...

We can also set the image icons for those file items.

--------------------------------------------
JFileChooser -Gui mechanism for letting a user choose a file (useful for opening or saving a file)
uses fileChooser, JFileChooser(); and you use the .showOpenDialog(null); method. 
If the response is 0 (the return value), uh he gets a bit choppy with the explaination.
Looks like JFileChooser has macros like 'APPROVE_OPTION', which he uses to obtain the selected file and then obtains the absolute path.

We can also set the fileChoosers directory. 
Trick for putting the file chooser in the current directory you can use '.'.
-------------------------------------------
Color chooser
https://youtu.be/xk4_1vDrzzo?t=31348

-------------------------------------------
KeyListener. <-No layout manager since he shows us how to move htings with the keyboard.
Now the frame will respond to keypresses. 
-------------------------------------------
MouseListener <-listens to mouse events. applying to the frame vs the listener matters.
-------------------------------------------
Drag and Drop <- He takes an image and drags it accross the window.
-------------------------------------------
Keybinding in Java
-------------------------------------------
2D graphics in Java.
Graphics2D is hte class he uses, and does etPAint, setPAint, draw's etc other arguments.
-------------------------------------------
2D Animations in Java.
-------------------------------------------





Part 4 : ADVANCED CONTROL TECHNIQUES

--------------------------------------------
Generics in Java, enables types (classes and interfaces) to be parameters when definintnig:
classes, interfaces, and methods. 
A benefit is to eliminate the need to create multiple versions
of methods or classes for various dat atypes. Use 1 versio nfor all reference data types.

Generics are similar to templates in cpp.

public static <Thing> void displayArray(Think[] array)
We can limit the generics by something called 'bounded parameters'
It can also return something generic. People like using 'P' instead of 'Thing'.
So isntead of void, you can also use Thing.
We bound it using 'extends 'parent class'', and then anything that is an instance of the super class or a subclass of that parent class will work but I believe nothing else.
NOTE/FUTURE-test this around.

-------------------------------------------

Serializations/deserialization , converts a object into a byte stream, etc.
Can be sent over a network or saved as a file, Could be saved as a platform indpenednet file.
Intersting.

.ser object.
Steps to serialize
1. your object class should implement Seralizable interface
2. Add import java.io.Serializable;
3. FileOutputStream fileOut = new FileOutputStream (file path)
4. ObjectOutputStream out = new ObjecTOutputStream(fileOut);
5. out.writeObjecT(objectName)
6. out.close(); fileOut.close;

Steps to Deserialize
1. declare your object ( don't instantiate)
2. Your class should implement Serializable interface
3. Add import Java.io.Serializable; 
4. FileInputStream fileIn = new FileInputStream(file path);
5. OutputInputStream in = new ObjectInputStream(fileIn);
6. objectName=(Class) in.readObject();
7. in.close(); fileIn.close();

---------------------------------------------------------
Advanced stuff. Serialization stuff.
Any children will also implment Serializable. 
Static fields are not serialized (they belong ot the class, not individual object)
the classes' defintion (class file) itslef is not recorded, cast it as the object type.
Fields declared as 'transient' aren't serialized, they're ignored (example like a password)
SerialVersionUID is a unique version ID.
https://youtu.be/xk4_1vDrzzo?t=39051

Serial and Deserial classes should match (see his comment on transient).


serial versions are useful it seems like for projects and such.
FUTURE/NOTE: return to test this stuff, and pay greater attention.
-------------
TimerTasks
-executes a task once or more by a timer. A  timer as a facility for threads to schedule tasks for future execution in a background thread.
(Seems like an autocorrect or spell check implmentation is possible).


------------
Threads : https://youtu.be/xk4_1vDrzzo?t=40143




